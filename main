module ALU4_tb();
  reg[3:0] A;
  reg[3:0] B;
  reg Op0;
  reg Op1;
  reg B_inv;
  wire[3:0] Out;
  
  ALU4 uut(A, B, Op1, Op0, B_inv, Out);
  initial begin
  // test AND
  A = 4'b0110;
  B = 4'b0011;
  Op0 = 0;
  Op1 = 0;
  B_inv = 0;
  #10;
  $display("Expected: 0010, actual %b", Out);
  #10;  
  // test add
  A = 4'd3;
  B = 4'd4;
  Op0 = 0;
  Op1 = 1;
  B_inv = 0;
  #10;
  $display("Expected: 7, actual %d", Out);
  #10;
  // test sub
  A = 4'd14;
  B = 4'd8;
  Op0 = 0;
  Op1 = 1;
  B_inv = 1;
  #10;
  $display("Expected: 6, actual %d", Out);
  #10;
      // test slt
  A = 4'd12;
  B = 4'd15;
  Op0 = 1;
  Op1 = 1;
  B_inv = 1;
  #10;
    $display("Expected: 1, actual %d", Out);
  #10;
  end
endmodule

module AndOr(A, B, AndOut, OrOut);
input A, B;
output AndOut, OrOut;
and (AndOut, A, B);
or (OrOut, A, B);
endmodule

module Carry(A, B, C_in, C_out);
input A, B, C_in;
output C_out;
and(a1, C_in, A);
and(a2, C_in, B);
and(a3, A, B);
or(C_out, a1, a2, a3);
endmodule

module Sum(A, B, C_in, S_out);
input A, B, C_in;
output S_out;
not(A_Bar, A);
not(B_Bar, B);
not(C_Bar, C_in);
and(a1, A_Bar, B, C_Bar);
and(a2, B_Bar, A, C_Bar);
and(a3, A_Bar, B_Bar, C_in);
and(a4, C_in, B, A);
or(S_out, a1, a2, a3, a4);
endmodule

module FourToOneMux(A, B, i1, i2, i3, i4, out);
input A, B, i1, i2, i3, i4;
output out;
  
not(A_Bar, A);
not(B_Bar, B);
and(a1, A_Bar, B_Bar, i1);
and(a2, A_Bar, B, i2);
and(a3, A, B_Bar, i3);
and(a4, A, B, i4);
or(out, a1, a2, a3, a4);
endmodule

module TwoToOneMux(In0, In1, Sel, Out);
input In0, In1, Sel;
output Out;
wire Sel_inv;
  wire a0, a1;
  not(Sel_inv, Sel);
  and(a0, In0, Sel_inv);
  and(a1, In1, Sel);
  or(Out, a0, a1);
endmodule



module OneBitALU(A,B,Less,Carry_In,Op1,Op0,B_inv,Out,Set,Carry_Out);
input A,B;
output Set;
output Out;
input Less;
input Carry_In;
output Carry_Out;
input Op1, Op0, B_inv;
wire AndOut, OrOut;
wire B_not;
wire B_selected;
  
not(B_not, B);
  TwoToOneMux mux1(B, B_not, B_inv, B_selected);
  AndOr ao (A, B, AndOut, OrOut);
  Carry c (A, B_selected, Carry_In, Carry_Out);
  Sum s (A, B_selected, Carry_In, Set);
  FourToOneMux mux2(Op1, Op0, AndOut, OrOut, Set, Less, Out);
endmodule

module ALU4(A, B, Op1, Op0, B_inv, Out);
  input[3:0] A;
  input[3:0] B;
  input Op0;
  input Op1;
  input B_inv;
  output[3:0] Out;
  
  wire Set0;
  wire Cout0;
  wire Set1;
  wire Cout1;
  wire Set2;
  wire Cout2;
  wire Set3;
  wire Cout3;
  
  // Connections: A,   B,   Less, Cin,  Op1, Op0, B_inv, Out, Set, Cout
  
  OneBitALU alu0(A[0], B[0], Set3, B_inv, Op1, Op0, B_inv, Out[0], Set0, Cout0);

  OneBitALU alu1(A[1], B[1], 0, Cout0, Op1, Op0, B_inv, Out[1], Set1, Cout1);

  OneBitALU alu2(A[2], B[2], 0, Cout1, Op1, Op0, B_inv, Out[2], Set2, Cout2);

  OneBitALU alu3(A[3], B[3], 0, Cout2, Op1, Op0, B_inv, Out[3], Set3, Cout3);
  
endmodule
